// mats-util

dependencies {
    implementation project(':mats-api')

    // The SFL4J API. Since you should provide the SLF4J implementation yourself, we use compileOnly.
    compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
    // JMS API. This is only relevant for the JMS ConnectionFactoryWrapper, and you must depend yourself.
    compileOnly "$jmsApiDependency"
    // Jackson - used by the Cache implementations. CompileOnly, so that you can use the util without Jackson.
    // If you use mats-serial-json, you will get Jackson on the classpath, and the Cache implementations will use it.
    compileOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"

    // :: TEST

    testImplementation "com.h2database:h2:$h2Version"

    // The JUnit library
    testImplementation "junit:junit:$junitVersion"
    // Mats-specific JUnit test classes
    testImplementation project(":mats-test-junit")
    // We want the standard logging, which will be auto-installed by being on the classpath.
    testImplementation project(':mats-intercept-logging')
    // Logging
    testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"
    testRuntimeOnly "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Mats^3 Utilities'
                description = 'Mats^3 Utilities - notably the MatsFuturizer, which provides a bridge from' +
                        ' synchronous processes to the highly asynchronous Mats^3 services.'
            }
        }
    }
}