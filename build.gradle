// Customize the Gradle Wrapper generation task.
wrapper {
    gradleVersion = "7.5.1"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

allprojects {
    group = 'io.mats3'
    version = '0.19.7-2023-04-16'

    project.buildDir = 'build-gradle'
}

// Versions for all libraries used throughout the subprojects
ext {
    activeMqVersion = '5.16.6'  // 5.16.6 is the last planned Java 8 version, per 2023-03-19
    artemisMqVersion = '2.19.1' // 2.19.1 is the last planned Java 8 version, per 2023-03-19
    springVersion = '5.3.26'
    jacksonVersion = '2.15.0'
    slf4jVersion = '1.7.36'
    micrometerVersion = '1.10.5'
    jmsApiVersion = '1.1-rev-1'
    javaxInjectVersion = '1'
    javaxAnnotationVersion = '1.3.2'

    // For the JUnit testing tools - including the library tests
    junitVersion = '4.13.2'
    // For the Jupiter testing tools
    jupiterVersion = '5.9.2'
    jupiterPlatformVersion = '1.9.2'

    // For testing
    logbackVersion = '1.2.12' // Old stable: SLF4J 1.7, Java EE, JDK 8.
    h2Version = '2.1.214'
    jettyVersion = '9.4.51.v20230217'
    hibernateVersion = '5.6.15.Final'
    remockVersion = '2.0.0'
}

// :: Note: Two different subproject-blocks, one for all common elements, and one for publishing.

// Common for all subprojects, even 'mats-api-test'
subprojects {
    apply plugin: 'java-library'

    repositories { mavenCentral() }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('--frames')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Mats3',
                    'Implementation-Version': archiveVersion
        }
    }

    test {
        /*
         * All tests employ MatsTestBroker to get hold of a JMS ConnectionFactory to use for its MatsFactory creation.
         * This per default starts an in-vm ActiveMQ broker, and connects a client ActiveMQConnectionFactory to this.
         *
         * However, via system properties, you may choose which JMS client to use (activemq or artemis, and
         * you may also explicitly specify the class name of a MatsTestBroker implementation. Note: rabbitmq is not
         * supported yet), and you may specify which URL to use (with a special value "localhost" denoting the
         * client-specific way to connect to a standard broker-installation on localhost).
         *
         * Both ActiveMQ and Artemis supports in-vm creation of the broker (server) - which is the default.
         *
         * == Run all tests with in-vm ActiveMQ brokers (ActiveMQ is default, in-vm is default)
         * ./gradlew clean test
         *
         * == Run all tests with in-vm Artemis MQ brokers (Apache ActiveMQ Artemis, formerly JBoss HornetQ,
         * and what Red Hat AMQ is based upon. In-vm is default):
         * ./gradlew -Pmats.test.broker=artemis clean test
         *
         * == Run all tests against an external ActiveMQ MQ broker on localhost (ActiveMQ is default).
         * ./gradlew -Pmats.test.brokerurl=localhost clean test
         *
         * == Run all tests against an external ActiveMQ MQ broker on specific URL (ActiveMQ is default).
         * (This URL happens to be identical to specifying just "localhost" for ActiveMQ)
         * ./gradlew -Pmats.test.brokerurl="tcp://localhost:61616" clean test
         *
         * == Run all tests against an external Artemis MQ broker on localhost:
         * ./gradlew -Pmats.test.broker=artemis -Pmats.test.brokerurl=localhost clean test
         *
         * == Run with your own implementation of MatsTestBroker:
         * ./gradlew -Pmats.test.broker=com.example.MyMatsTestBrokerImpl clean test
         */
        systemProperties project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"])

        // Move over the CI environment variable, so that we can increase timings of tests if on CI environment.
        // (Check MatsTestLatch.WAIT_MILLIS_FOR_NON_OCCURENCE)
        systemProperties System.getenv().subMap(["CI"])

        testLogging {
            exceptionFormat = 'full'
        }
    }

    // ------------------------------------------------
    // -- Simple tools

    // Define dependency report task that all subprojects gets. Invoke with "./gradlew allDeps | less"
    task allDeps(type: DependencyReportTask) {}

    // Some info about current gradle environment.
    task systemInformation {
        doLast {
            println "\n** Java properties [System.getProperties()], sorted:\n"
            System.properties.sort().each { k, v ->
                println("$k = $v")
            }
            println "\n** Environment [System.getenv()], sorted:\n"
            System.env.sort().each { k, v ->
                println("$k = $v")
            }
            println ''
            println "** Java Version:   " + System.getProperty("java.version")
            println "** Groovy Version: " + GroovySystem.getVersion()
            println "** Gradle Version: " + gradle.gradleVersion
        }
    }
}

// For "all JavaDoc" task, sweeping together all sources to make a complete set of JavaDoc in one go.
// - Adapted from https://coderwall.com/p/evtdbw/aggregate-javadoc-in-multiproject-gradle-builds
apply plugin: 'java'
task alljavadoc(type: Javadoc) {
    def relevantProjects = subprojects.findAll {it.name != 'mats-api-test'}
    source relevantProjects.collect { it.sourceSets.main.allJava }
    classpath = files(relevantProjects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('--frames')
}
// .. ensure 'alljavadoc' is run together with './gradlew clean javadoc', thus building 'all' + submodules.
javadoc.dependsOn alljavadoc

// For publishing subprojects: All, minus 'mats-api-test'
configure(subprojects.findAll {it.name != 'mats-api-test'}) {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    java {
        withJavadocJar()
        withSourcesJar()
    }


    signing {
        // "configurations.archives" didn't sign anything, while this overeagerly even signs the MD5s and SHAs..
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'Mats^3'
                    description = 'Message-based Asynchronous Transactional Staged Stateless Services'
                    url = 'https://github.com/centiservice/mats3'
                    licenses {
                        license {
                            name = 'PolyForm Perimeter License 1.0.0 with examples'
                            url = 'https://github.com/centiservice/mats3/blob/main/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre St√∏lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/stolsvik/mats.git'
                        developerConnection = 'scm:git:ssh://github.com:centiservice/mats3.git'
                        url = 'https://github.com/centiservice/mats3'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name 'SonatypeOSSRHSnapshot'
                url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
            maven {
                name 'SonatypeOSSRHStaging'
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
        }
    }

    // Tasks to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    task matsPublishSnapshot(dependsOn: [publishAllPublicationsToSonatypeOSSRHSnapshotRepository])
    task matsPublishStaging(dependsOn: [publishAllPublicationsToSonatypeOSSRHStagingRepository])
}